(import (chicken load))
(import (chicken process-context)
        (chicken port)
        args)

(load-relative "parse.scm")
(load-relative "simulation.scm")

; load the args
(define opts
    (list
        (args:make-option (s small)         (required: "SMALL")          "choose from 1:10 inclusive.   EG: -s 1,2,5,7")
        (args:make-option (l large)         (required: "LARGE")          "choose from (25,50,75,100).   EG: -l 25,100")
        (args:make-option (t target)        (required: "TARGET")         "a 3-digit integer 100:999.    EG: -t 340")
        (args:make-option (p pop)           (required: "POPULATION")     "maximum number of algorithms. EG: -p 40")
        (args:make-option (g gen)           (required: "GENERATIONS")    "number of generations.        EG: -g 400")
        (args:make-option (h help)          #:none                       "Display this text")))

(define (usage)
    (with-output-to-port (current-error-port)
        (lambda ()
            (print "Usage: " (car (argv)) " [options...]")
            (newline)
            (print (args:usage opts))
            (print "Find it on Github at.")))
    (exit 1))

(receive (options operands)
    (args:parse (command-line-arguments) opts)

    (cond ((not (alist-ref 'small options))
              (print "missing small")
              (usage))
          ((not (alist-ref 'large options))
              (print "missing large")
              (usage))
          ((not (alist-ref 'target options))
              (print "missing target")
              (usage))
          ((not (alist-ref 'pop options))
              (print "missing population")
              (usage))
          ((not (alist-ref 'gen options))
              (print "missing generations")
              (usage)))
    
    (let ((small-numbers (parse-small-arg (alist-ref 'small options)))
          (large-numbers (parse-large-arg (alist-ref 'large options)))
          (target (parse-target-arg (alist-ref 'target options)))
          (population (parse-numeric-arg (alist-ref 'pop options)))
          (generations (parse-numeric-arg (alist-ref 'gen options))))
        (run-simulation small-numbers large-numbers target population generations)))
