(import (chicken load))
(import (chicken random))

(load-relative "genetic.scm")

(define (select-operators options number-required)
    (define (loop selected options number-required)
        (if (equal? number-required 0)
            selected
            (let ((operator-to-select (pseudo-random-integer (length options))))
                (cond
                    ((equal? operator-to-select 0)
                        (set! selected (append selected (list (car options)))))
                    ((equal? operator-to-select 1)
                        (set! selected (append selected (list (car (cdr options))))))
                    ((equal? operator-to-select 2)
                        (set! selected (append selected (list (car (cdr (cdr options)))))))
                    ((equal? operator-to-select 3)
                        (set! selected (append selected (list (car (cdr (cdr (cdr options))))))))
                )
                (loop selected options (- number-required 1))
            )
        )
    )
    (loop (list) options number-required)
)

(define (form-algorithm numbers operators)
    (define (loop algorithm numbers operators add-operator-next)
        (cond
            ((and (equal? (length numbers) 0) (equal? (length operators) 0))
                algorithm)
            ((equal? (length operators) 0)
                (set! algorithm (append algorithm (list (car numbers))))
                (set! numbers (cdr numbers))
                (loop algorithm numbers operators (not add-operator-next)))
            (add-operator-next
                (set! algorithm (append algorithm (list (car operators))))
                (set! operators (cdr operators))
                (loop algorithm numbers operators (not add-operator-next)))
            (else
                (set! algorithm (append algorithm (list (car numbers))))
                (set! numbers (cdr numbers))
                (loop algorithm numbers operators (not add-operator-next))))
    )
    (loop (list) numbers operators #t)
)

(define (create-one-algorithm numbers operator-options population-target)
    (define number-count (length numbers))
    ; There are always one fewer nodes than leaf nodes for every binary tree
    (define operator-count (- number-count 1))
    (define operators (select-operators operator-options operator-count))
    (form-algorithm numbers operators)
)

(define (create-mutations first-algorithm population-target)
    (define (loop algorithms last-algorithm number-required)
        (if (equal? number-required 0)
            algorithms
            (let ((pos-A (pseudo-random-integer (length last-algorithm)))
                (pos-B (pseudo-random-integer (length last-algorithm))))
                (let ((new-algorithm (mutate last-algorithm pos-A pos-B +)))
                    (let ((algorithms (append algorithms (list new-algorithm))))
                        (print (eval-expression-tree new-algorithm))
                        (loop algorithms new-algorithm (- number-required 1))
                    )
                )
            )
        )
    )
    (loop (list first-algorithm) first-algorithm population-target)
)
